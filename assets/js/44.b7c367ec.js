(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{327:function(a,t,e){"use strict";e.r(t);var r=e(12),i=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"idea-debug-调试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#idea-debug-调试"}},[a._v("#")]),a._v(" IDEA DEBUG 调试")]),a._v(" "),t("h3",{attrs:{id:"基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[a._v("#")]),a._v(" 基础")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/idea/idea-debug.png",alt:"idea-debug.png"}})]),a._v(" "),t("p",[a._v("从左到右依次如下")]),a._v(" "),t("ol",[t("li",[a._v("Show Execution Point (Alt + F10)：跳转到光标所在代码执行的行。")]),a._v(" "),t("li",[a._v("Step Over (F8)：步过，一行一行地往下走，如果这一行上有方法不会进入方法。")]),a._v(" "),t("li",[a._v("Step Into (F7)：步入，如果当前行有方法，可以进入方法内部，一般用于进入自定义方法内，不会进入官方类库的方法。")]),a._v(" "),t("li",[a._v("Force Step Into (Alt + Shift + F7)：强制步入，能进入任何方法，查看底层源码的时候可以用这个进入官方类库的方法。")]),a._v(" "),t("li",[a._v("Step Out (Shift + F8)：步出，从步入的方法内退出到方法调用处，此时方法已执行完毕，只是还没有完成赋值。")]),a._v(" "),t("li",[a._v("Drop Frame (默认无)：回退断点。")]),a._v(" "),t("li",[a._v("Run to Cursor (Alt + F9)：运行到光标处，你可以将光标定位到你需要查看的那一行，然后使用这个功能，代码会运行至光标行，而不需要打断点。")]),a._v(" "),t("li",[a._v("Evaluate Expression (Alt + F8)：计算表达式。")])]),a._v(" "),t("h3",{attrs:{id:"字段断点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字段断点"}},[a._v("#")]),a._v(" 字段断点")]),a._v(" "),t("p",[a._v("在字段上打断点时，会监听值的整个生命周期的变化。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/idea/idea-debug-breakpoint-field.png",alt:"idea-debug.png"}})]),a._v(" "),t("h3",{attrs:{id:"异常断点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常断点"}},[a._v("#")]),a._v(" 异常断点")]),a._v(" "),t("p",[a._v("全局监听，当出现相关异常时会自动断点停在异常代码处。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/idea/idea-debug-breakpoint-exception.png",alt:"idea-debug.png"}})]),a._v(" "),t("h3",{attrs:{id:"方法断点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法断点"}},[a._v("#")]),a._v(" 方法断点")]),a._v(" "),t("p",[a._v("在方法上打断点时，会自动进入方法第一行断点以及最后出方法时断点，方便查看结果。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/idea/idea-debug-breakpoint-method.png",alt:"idea-debug.png"}})]),a._v(" "),t("p",[a._v("当不确定接口由哪一个具体的类实现时，可接口方法处进行断点，方法调用时会自动进入具体的实现类中。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/idea/idea-debug-breakpoint-interface-method.png",alt:"idea-debug.png"}})]),a._v(" "),t("h3",{attrs:{id:"手动制造抛出异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手动制造抛出异常"}},[a._v("#")]),a._v(" 手动制造抛出异常")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/idea/idea-debug-throw-exception.png",alt:"idea-debug.png"}})]),a._v(" "),t("h3",{attrs:{id:"强制返回"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强制返回"}},[a._v("#")]),a._v(" 强制返回")]),a._v(" "),t("p",[a._v("不再执行之后的代码\n"),t("img",{attrs:{src:"/images/idea/idea-debug-force-return.png",alt:"idea-debug.png"}})]),a._v(" "),t("h3",{attrs:{id:"stream调试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stream调试"}},[a._v("#")]),a._v(" stream调试")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/idea/idea-debug-stream.png",alt:"idea-debug.png"}})]),a._v(" "),t("h3",{attrs:{id:"线程调试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程调试"}},[a._v("#")]),a._v(" 线程调试")]),a._v(" "),t("p",[a._v("通过切换线程控制线程执行顺序\n"),t("img",{attrs:{src:"/images/idea/idea-debug-thread.png",alt:"idea-debug.png"}})])])}),[],!1,null,null,null);t.default=i.exports}}]);